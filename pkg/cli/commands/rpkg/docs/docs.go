// Copyright 2022 The kpt and Nephio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code originally generated by "mdtogo", but
// no longer maintained that way.
package docs

var RpkgShort = `Manage packages.`
var RpkgLong = `
The ` + "`" + `rpkg` + "`" + ` command group contains subcommands for managing packages and revisions.
`

var ApproveShort = `Approve a proposal to publish a package revision.`
var ApproveLong = `
  porchctl rpkg approve [PACKAGE_REV_NAME...] [flags]

Args:

  PACKAGE_REV_NAME...:
    The name of one or more package revisions. If more than
    one is provided, they must be space-separated.
`
var ApproveExamples = `
  # approve package revision blueprint-91817620282c133138177d16c981cf35f0083cad
  $ porchctl rpkg approve blueprint-91817620282c133138177d16c981cf35f0083cad --namespace=default
`

var CloneShort = `Create a clone of an existing package revision.`
var CloneLong = `
  porchctl rpkg clone SOURCE_PACKAGE_REV TARGET_PACKAGE_NAME [flags]

Args:

  SOURCE_PACKAGE_REV:
    The source package that will be cloned to create the new package revision.
    The types of sources are supported:

      * OCI: A URI to a OCI repository must be provided.
        oci://oci-repository/package-name
      * Git: A URI to a git repository must be provided.
        https://git-repository.git/package-name
      * Package: The name of a package revision already available in the
        repository.
        blueprint-e982b2196b35a4f5e81e92f49a430fe463aa9f1a

  TARGET_PACKAGE_NAME:
    The name of the new package.


Flags:

  --directory
    Directory within the repository where the upstream
    package revision is located. This only applies if the source package is in git
    or oci.

  --ref
    Ref in the repository where the upstream package revision
    is located (branch, tag, SHA). This only applies when the source package
    is in git.

  --repository
    Repository to which package revision will be cloned
    (downstream repository).

  --workspace
    Workspace for the new package. The default value is v1.

  --strategy
    Update strategy that should be used when updating the new
    package revision. Must be one of:
    =resource-merge: (Default) Perform a structural comparison of the original
      updated resources, and merge the changes into the local package.
    =fast-forward: Fail without updating if the local package was modified since it was fetched.
    =force-delete-replace: Wipe all the local changes to the package and replace
      it with the remote version.
    =copy-merge: Copy all the remote changes to the local package.

  --secret-ref
    Name of the secret containing basic authentication used to authenticate with the upstream repository (git-only).
    Naturally, this secret has to exist in the kubernetes cluster and must be in the namespace
    where the package revision is to be created.
`
var CloneExamples = `
  # clone the blueprint-e982b2196b35a4f5e81e92f49a430fe463aa9f1a package and create a new package revision called
  # foo in the blueprint repository with a custom workspaceName.
  $ porchctl rpkg clone blueprint-e982b2196b35a4f5e81e92f49a430fe463aa9f1a foo --repository blueprint --workspace=first-draft
  # packclone in the porch-test repository with a v1 workspaceName, and force-delete-replace update strategy
  $ porchctl rpkg clone porch-test.pack.v1 packclone --namespace=porch-demo -repository=porch-test --workspace=v1 --strategy=force-delete-replace

  # clone the git repository at https://github.com/repo/blueprint.git at reference base/v0 and in directory base. The new
  # package revision will be created in repository blueprint and namespace default.
  $ porchctl rpkg clone https://github.com/repo/blueprint.git bar --repository=blueprint --ref=base/v0 --namespace=default --directory=base
`

var CopyShort = `Create a new package revision from an existing one.`
var CopyLong = `
  porchctl rpkg copy SOURCE_PACKAGE_REV_NAME [flags]

Args:

  SOURCE_PACKAGE_REV_NAME:
    The name of the package revision that will be used as the source
    for creating a new package revision.

Flags:

  --workspace
    Workspace for the new package revision.
`
var CopyExamples = `
  # create a new package from package blueprint-b47eadc99f3c525571d3834cc61b974453bc6be2
  $ porchctl rpkg copy blueprint-b47eadc99f3c525571d3834cc61b974453bc6be2 --workspace=v10 --namespace=default
`

var DelShort = `Delete a package revision.`
var DelLong = `
  porchctl rpkg del PACKAGE_REV_NAME... [flags]

Args:

  PACKAGE_REV_NAME...:
    The name of one or more package revisions. If more than
    one is provided, they must be space-separated.
`
var DelExamples = `
  # remove package revision blueprint-e982b2196b35a4f5e81e92f49a430fe463aa9f1a from the default namespace
  $ porchctl rpkg del blueprint-e982b2196b35a4f5e81e92f49a430fe463aa9f1a --namespace=default
`

var GetShort = `List package revisions in registered repositories.`
var GetLong = `
  porchctl rpkg get [PACKAGE_REV_NAME] [flags]

Args:

  PACKAGE_REV_NAME:
    The name of a package revision. If provided, only that specific
    package revision will be shown. Defaults to showing all package
    revisions from all repositories.

Flags:

  --name
    Name of the packages to get. Any package whose name contains
    this value will be included in the results.

  --revision
    Revision of the package to get. Any package whose revision
    matches this value will be included in the results.
`
var GetExamples = `
  # get a specific package revision in the default namespace
  $ porchctl rpkg get blueprint-e982b2196b35a4f5e81e92f49a430fe463aa9f1a --namespace=default

  # get all package revisions in the bar namespace
  $ porchctl rpkg get --namespace=bar

  # get all package revisions with revision v0
  $ porchctl rpkg get --revision=v0
`

var InitShort = `Initializes a new package in a repository.`
var InitLong = `
  porchctl rpkg init PACKAGE_NAME [flags]

Args:

  PACKAGE_NAME:
    The name of the new package.

Flags:

  --repository
    Repository in which the new package will be created.

  --workspace
    Workspace of the new package.

  --description
    Short description of the package

  --keywords
    List of keywords for the package

  --site
    Link to page with information about the package
`
var InitExamples = `
  # create a new package named foo in the repository blueprint.
  $ porchctl rpkg init foo --namespace=default --repository=blueprint --workspace=v1
`

var ProposeShort = `Propose that a package revision should be published.`
var ProposeLong = `
  porchctl rpkg propose [PACKAGE_REV_NAME...] [flags]

Args:

  PACKAGE_REV_NAME...:
    The name of one or more package revisions. If more than
    one is provided, they must be space-separated.
`
var ProposeExamples = `
  # propose that package revision blueprint-91817620282c133138177d16c981cf35f0083cad should be finalized.
  $ porchctl rpkg propose blueprint-91817620282c133138177d16c981cf35f0083cad --namespace=default
`

var ProposeDeleteShort = `Propose deletion of a published package revision.`
var ProposeDeleteLong = `
  porchctl rpkg propose-delete PACKAGE_REV_NAME... [flags]

Args:

  PACKAGE_REV_NAME...:
  The name of one or more package revisions. If more than
  one is provided, they must be space-separated.
`
var ProposeDeleteExamples = `
  # Propose published package revision blueprint-e982b2196b35a4f5e81e92f49a430fe463aa9f1a for deletion.
  $ porchctl rpkg propose-delete blueprint-e982b2196b35a4f5e81e92f49a430fe463aa9f1a --namespace=default
`

var PullShort = `Pull the content of the package revision.`
var PullLong = `
  porchctl rpkg pull PACKAGE_REV_NAME [DIR] [flags]

Args:

  PACKAGE_REV_NAME:
    The name of a an existing package revision in a repository.

  DIR:
    A local directory where the package manifests will be written.
    If not provided, the manifests are written to stdout.
`
var PullExamples = `
  # pull the content of package revision blueprint-d5b944d27035efba53836562726fb96e51758d97
  $ porchctl rpkg pull blueprint-d5b944d27035efba53836562726fb96e51758d97 --namespace=default
`

var PushShort = `Push resources to a package revision.`
var PushLong = `
  porchctl rpkg push PACKAGE_REV_NAME [DIR] [flags]

Args:

  PACKAGE_REV_NAME:
    The name of a an existing package revision in a repository.

  DIR:
    A local directory with the new manifest. If the manifests have be read from stdin, use '-' in place of DIR.
`
var PushExamples = `
  # update the package revision blueprint-f977350dff904fa677100b087a5bd989106d0456 with the resources
  # in the ./package directory
  $ porchctl rpkg push blueprint-f977350dff904fa677100b087a5bd989106d0456 ./package --namespace=default

  # update the package revision blueprint-f977350dff904fa677100b087a5bd989106d0456 with the resources
  # using stdin
  $ porchctl rpkg push blueprint-f977350dff904fa677100b087a5bd989106d0456 - <stdin> --namespace=default
`

var RejectShort = `Reject a proposal to publish or delete a package revision.`
var RejectLong = `
  porchctl rpkg reject [PACKAGE_REV_NAME...] [flags]

Args:

  PACKAGE_REV_NAME...:
    The name of one or more package revisions. If more than
    one is provided, they must be space-separated.
`
var RejectExamples = `
  # reject the proposal for package revision blueprint-8f9a0c7bf29eb2cbac9476319cd1ad2e897be4f9
  $ porchctl rpkg reject blueprint-8f9a0c7bf29eb2cbac9476319cd1ad2e897be4f9 --namespace=default
`

var UpgradeShort = `Create a new revision which upgrades a published downstream to a more recent published revision of its upstream package.`
var UpgradeLong = `
  porchctl rpkg upgrade SOURCE_PACKAGE_REVISION [flags]

Args:

  SOURCE_PACKAGE_REVISION:
  The target downstream package revision to be upgraded. Must be published
  and must be coming from a package that has an upstream package (typically
  this means that it was cloned from another package).


Flags:

  --revision
  (Optional) The revision number of the upstream kpt package that the target
  downstream package revision (SOURCE_PACKAGE_REVISION) should be upgraded to.
  The corresponding revision must be published.

  --workspace
  The workspace name of the newly created package revision.
`
var UpgradeExamples = `
  # upgrade deployment.some-package.v1 package to v3 of its upstream
  $ porchctl rpkg upgrade deployment.some-package.v1 --revision=3 --workspace=v2

  # upgrade deployment.some-package.v1 package to the latest of its upstream
  $ porchctl rpkg upgrade deployment.some-package.v1 --workspace=v2
`
