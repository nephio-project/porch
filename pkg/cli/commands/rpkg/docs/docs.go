// Copyright 2022 The kpt and Nephio Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code originally generated by "mdtogo", but
// no longer maintained that way.
package docs

var RpkgShort = `Manage packages.`
var RpkgLong = `
The ` + "`" + `rpkg` + "`" + ` command group contains subcommands for managing packages and revisions (versions) of these packages.
`

var ApproveShort = `Approve a proposal to publish a package revision.`
var ApproveLong = `
  porchctl rpkg approve [K8S_PACKAGE_REV_NAME...] [flags]

Args:

  K8S_PACKAGE_REV_NAME...:
    The kubernetes name of one or more package revisions. If more than
    one is provided, they must be space-separated.
`
var ApproveExamples = `
  # approve package revision 'example-repo.example-package-name.example-workspace'
  $ porchctl rpkg approve example-repo.example-package-name.example-workspace --namespace=example-namespace
`

var CloneShort = `Create a clone of an existing package revision.`
var CloneLong = `
  porchctl rpkg clone SOURCE_PACKAGE_REV TARGET_PACKAGE_NAME [flags]

Args:

  SOURCE_PACKAGE_REV:
    The source package that will be cloned to create the new package revision.
    The types of sources are supported:

      * OCI: A URI to a OCI repository must be provided.
        oci://oci-repository/package-name
      * Git: A URI to a git repository must be provided.
        https://git-repository.git/package-name
      * Package: The kubernetes name of a package revision already available in the
        repository.
        example-repo.example-package-name.example-workspace

  TARGET_PACKAGE_NAME:
    The name of the new package.


Flags:

  --directory
    Directory within the upstream repository where the upstream
    package revision is located. This only applies if the source package is in git
    or oci.

  --ref
    Ref in the upstream repository where the package revision
    is located. This can be a branch, a tag or a SHA. This only applies when the source package
    is in git.

  --repository
    This is the downstream repository which the package revision will be cloned to.

  --workspace
    The workspace name assigned to the new downstream package revision. The default value is v1.

  --strategy
    Update strategy that should be used when updating the new
    package revision. Must be one of:
    =resource-merge: (Default) Perform a structural comparison of the original
      updated resources, and merge the changes into the local package.
    =fast-forward: Fail without updating if the local package was modified since it was fetched.
    =force-delete-replace: Wipe all the local changes to the package and replace
      it with the remote version.
    =copy-merge: Copy all the remote changes to the local package.
`
var CloneExamples = `
  # clone the 'example-repo.example-package-name.example-workspace' package and create a new package revision called
  # 'example-package-name-2' in the 'example-repo-2' repository with a new workspace named 'example-workspace-2' and 'force-delete-replace' update strategy.
  $ porchctl rpkg clone example-repo.example-package-name.example-workspace example-package-name-2 --repository=example-repo-2 --workspace=example-workspace-2 --strategy=force-delete-replace

  # clone the git repository at 'https://github.com/repo/blueprint.git' at reference 'base/v0' and in directory base. The new
  # package revision will be created in repository 'blueprint' and namespace 'default'.
  $ porchctl rpkg clone https://github.com/repo/blueprint.git example-downstream-package --repository=blueprint --ref=base/v0 --namespace=default --directory=base
`

var CopyShort = `Create a new package revision from an existing one.`
var CopyLong = `
  porchctl rpkg copy SOURCE_PACKAGE_REV_NAME [flags]

Args:

  SOURCE_K8S_PACKAGE_REV_NAME:
    The kubernetes name of the package revision that will be used as the source
    for creating a new package revision.

Flags:

  --workspace
    Workspace for the new package revision.
`
var CopyExamples = `
  # create a new package from package 'example-repo.example-package-name.example-workspace' in the new workspace 'example-workspace-2'
  $ porchctl rpkg copy example-repo.example-package-name.example-workspace --workspace=example-workspace-2 --namespace=example-namespace
`

var DelShort = `Delete a package revision.`
var DelLong = `
  porchctl rpkg del K8S_PACKAGE_REV_NAME... [flags]

Args:

  K8S_PACKAGE_REV_NAME...:
    The kubernetes name of one or more package revisions. If more than
    one is provided, they must be space-separated.
`
var DelExamples = `
  # remove package revision 'example-repo.example-package-name.example-workspace'
  $ porchctl rpkg del example-repo.example-package-name.example-workspace -n example-namespace
`

var GetShort = `List package revisions in registered repositories.`
var GetLong = `
  porchctl rpkg get [K8S_PACKAGE_REV_NAME] [flags]

Args:

  K8S_PACKAGE_REV_NAME:
    The kubernetes name of a package revision. If provided, only that specific
    package revision will be shown. Defaults to showing all package
    revisions from all repositories.

Flags:

  --name
    Name of the packages to get. Any package whose name contains
    this value will be included in the results.

  --revision
    Revision of the package to get. Any package whose revision
    matches this value will be included in the results.
`
var GetExamples = `
  # get a specific package revision using its kubernetes resource name in the 'example-namespace' namespace
  $ porchctl rpkg get example-repo.example-package-name.example-workspace --namespace=example-namespace

  # get a specific package revision named 'example-package-name' in the 'example-namespace' namespace
  $ porchctl rpkg get --name=example-package-name --namespace=example-namespace

  # get all package revisions in the 'example-namespace' namespace
  $ porchctl rpkg get --namespace=example-namespace

  # get all package revisions with revision '0'
  $ porchctl rpkg get --revision=0
`

var InitShort = `Initializes a new package revision in a repository.`
var InitLong = `
  porchctl rpkg init PACKAGE_NAME [flags]

Args:

  PACKAGE_NAME:
    The name of the new package.

Flags:

  --repository
    Repository in which the new package will be created.

  --workspace
    Workspace of the new package.

  --description
    Short description of the package

  --keywords
    List of keywords for the package

  --site
    Link to page with information about the package
`
var InitExamples = `
  # create a new package named 'example-package-name' in the repository 'example-repository' which exists in the namespace 'example-namespace'.
  $ porchctl rpkg init example-package-name --repository=example-repository --workspace=example-workspace --namespace=example-namespace
`

var ProposeShort = `Propose that a package revision should be published.`
var ProposeLong = `
  porchctl rpkg propose [K8S_PACKAGE_REV_NAME...] [flags]

Args:

  K8S_PACKAGE_REV_NAME...:
    The kubernetes name of one or more package revisions. If more than
    one is provided, they must be space-separated.
`
var ProposeExamples = `
  # propose that package revision 'example-repo.example-package-name.example-workspace' should be finalized.
  $ porchctl rpkg propose example-repo.example-package-name.example-workspace --namespace=example-namespace
`

var ProposeDeleteShort = `Propose deletion of a published package revision.`
var ProposeDeleteLong = `
  porchctl rpkg propose-delete K8S_PACKAGE_REV_NAME... [flags]

Args:

  K8S_PACKAGE_REV_NAME...:
  The kubernetes name of one or more package revisions. If more than
  one is provided, they must be space-separated.
`
var ProposeDeleteExamples = `
  # Propose published package revision 'example-repo.example-package-name.example-workspace' for deletion.
  $ porchctl rpkg propose-delete example-repo.example-package-name.example-workspace --namespace=example-namespace
`

var PullShort = `Pull the content of the package revision.`
var PullLong = `
  porchctl rpkg pull K8S_PACKAGE_REV_NAME [DIR] [flags]

Args:

  K8S_PACKAGE_REV_NAME:
    The kubernetes name of a an existing package revision in a repository.

  DIR:
    A local directory where the package manifests will be written.
    If not provided, the manifests are written to stdout.
`
var PullExamples = `
  # pull the content of package revision 'example-repo.example-package-name.example-workspace'
  $ porchctl rpkg pull example-repo.example-package-name.example-workspace --namespace=example-namespace
`

var PushShort = `Push resources to a package revision.`
var PushLong = `
  porchctl rpkg push K8S_PACKAGE_REV_NAME [DIR] [flags]

Args:

  K8S_PACKAGE_REV_NAME:
    The kubernetes name of a an existing package revision in a repository.

  DIR:
    A local directory with the new manifest. If the manifests have be read from stdin, use '-' in place of DIR.
`
var PushExamples = `
  # update the package revision 'example-repo.example-package-name.example-workspace' with the resources
  # in the './example-package-dir' directory
  $ porchctl rpkg push example-repo.example-package-name.example-workspace ./example-package-dir --namespace=example-namespace

  # update the package revision 'example-repo.example-package-name.example-workspace' with the resources
  # using 'stdin'
  $ porchctl rpkg push example-repo.example-package-name.example-workspace - <stdin> --namespace=example-namespace
`

var RejectShort = `Reject a proposal to publish or delete a package revision.`
var RejectLong = `
  porchctl rpkg reject [K8S_PACKAGE_REV_NAME...] [flags]

Args:

  K8S_PACKAGE_REV_NAME...:
    The kubernetes name of one or more package revisions. If more than
    one is provided, they must be space-separated.
`
var RejectExamples = `
  # reject the proposal for package revision 'example-repo.example-package-name.example-workspace'
  $ porchctl rpkg reject example-repo.example-package-name.example-workspace --namespace=example-namespace
`

var UpdateShort = `Update a downstream package revision to a more recent revision of its upstream package.`
var UpdateLong = `
  porchctl rpkg update K8S_PACKAGE_REV_NAME [flags]

Args:

  K8S_PACKAGE_REV_NAME:
  The kubernetes name of the target downstream package revision to be updated.


Flags:

  --revision
  The revision number of the upstream kpt package that the target
  downstream package (K8S_PACKAGE_REV_NAME) should be updated to. With
  this flag, you can only specify one target downstream package.

  --discover
  If set, list packages revisions that need updates rather than
  performing an update. Must be one of 'upstream' or 'downstream'. If
  set to 'upstream', this will list downstream package revisions that
  have upstream updates available. If set to 'downstream', this will list
  upstream package revisions whose downstream package revisions need
  to be updated. You can optionally pass in package revision names as arguments
  in order to just list updates for those package revisions, or you can
  pass in no arguments in order to list available updates for all package
  revisions.

`
var UpdateExamples = `
  # update 'example-repo.example-package-name.example-workspace' package to revision '3' of its upstream
  $ porchctl rpkg update example-repo.example-package-name.example-workspace --revision=3

  # see available 'upstream' updates for all your downstream packages
  $ porchctl rpkg update --discover=upstream

  # see available updates for any 'downstream' packages that were created from the upstream 'example-repo.example-package-name.example-workspace' package
  $ porchctl rpkg update --discover=downstream example-repo.example-package-name.example-workspace
`
