# Copyright 2025 The kpt and Nephio Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
apiVersion: v1
kind: Namespace
metadata:
  name: porch-system

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: porch-postgresql
  namespace: porch-system
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: porch
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: porch-postgresql
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: porch
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: porch-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: porch
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: default
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: porch
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/bitnami/postgresql:17.5.0-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRESQL_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: porch-db-config
                  key: DB_NAME
            - name: POSTGRESQL_PORT_NUMBER
              valueFrom:
                configMapKeyRef:
                  name: porch-db-config
                  key: DB_PORT
            # Authentication
            - name: POSTGRESQL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: porch-db-secret
                  key: DB_USER
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: porch-db-secret
                  key: DB_PASSWORD
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432

          startupProbe:
            tcpSocket:
              port: 5432
            failureThreshold: 30
            periodSeconds: 10

          livenessProbe:
            tcpSocket:
              port: 5432
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5

          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "porch" -d "dbname=porch" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]

          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: initdb
          configMap:
            name: porch-schema
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "10Gi"

---

apiVersion: v1
kind: Service
metadata:
  name: porch-postgresql
  namespace: porch-system
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: porch
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: porch
    app.kubernetes.io/component: primary

---

apiVersion: v1
kind: Service
metadata:
  name: porch-postgresql-lb
  namespace: porch-system
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/part-of: porch
spec:
  type: LoadBalancer
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: porch
    app.kubernetes.io/component: primary
  ports:
    - name: postgresql
      port: 5432
      targetPort: 5432
      nodePort: 30002

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: porch-schema
  namespace: porch-system
data:
  porch-db.sql: |
    DROP TABLE IF EXISTS resources;
    DROP TABLE IF EXISTS package_revisions;
    DROP TABLE IF EXISTS packages;
    DROP TABLE IF EXISTS repositories;

    DROP TYPE IF EXISTS package_rev_lifecycle;

    CREATE TABLE IF NOT EXISTS repositories (
        k8s_name_space      TEXT NOT NULL,
        k8s_name            TEXT NOT NULL,
        path                TEXT NOT NULL,
        placeholder_ws_name TEXT NOT NULL,
        meta                TEXT NOT NULL,
        spec                TEXT NOT NULL,
        updated             TIMESTAMPTZ,
        updatedby           TEXT NOT NULL,
        deployment          BOOLEAN,
        PRIMARY KEY (k8s_name_space, k8s_name)
    );

    CREATE TABLE IF NOT EXISTS packages (
        k8s_name_space   TEXT NOT NULL,
        k8s_name         TEXT NOT NULL,
        repo_k8s_name    TEXT NOT NULL,
        package_path     TEXT NOT NULL,
        meta             TEXT NOT NULL,
        spec             TEXT NOT NULL,
        updated          TIMESTAMPTZ NOT NULL,
        updatedby        TEXT NOT NULL,
        PRIMARY KEY (k8s_name_space, k8s_name)
        CONSTRAINT fk_repository
            FOREIGN KEY (k8s_name_space, repo_k8s_name)
            REFERENCES repositories (k8s_name_space, k8s_name)
            ON DELETE CASCADE
    );

    CREATE TYPE package_rev_lifecycle AS ENUM ('Draft', 'Proposed', 'Published', 'DeletionProposed');

    CREATE TABLE IF NOT EXISTS package_revisions (
        k8s_name_space   TEXT NOT NULL,
        k8s_name         TEXT NOT NULL,
        package_k8s_name TEXT NOT NULL,
        workspace        TEXT NOT NULL,
        revision         INTEGER NOT NULL,
        meta             TEXT NOT NULL,
        spec             TEXT NOT NULL,
        updated          TIMESTAMPTZ NOT NULL,
        updatedby        TEXT NOT NULL,
        lifecycle        package_rev_lifecycle NOT NULL,
        PRIMARY KEY (k8s_name_space, k8s_name),
        CONSTRAINT fk_package
            FOREIGN KEY (k8s_name_space, pacakge_k8s_name)
            REFERENCES packages (k8s_name_space, k8s_name)
            ON DELETE CASCADE
    );

    CREATE TABLE IF NOT EXISTS resources (
        k8s_name_space       TEXT NOT NULL,
        k8s_name             TEXT NOT NULL,
        package_rev_k8s_name TEXT NOT NULL,
        revision             INTEGER NOT NULL,
        resource_key         TEXT NOT NULL,
        resource_value       TEXT NOT NULL,
        PRIMARY KEY (k8s_name_space, k8s_name, resource_key),
        CONSTRAINT fk_package_rev
            FOREIGN KEY (k8s_name_space, package_rev_k8s_name)
            REFERENCES package_revisions (k8s_name_space, k8s_name)
            ON DELETE CASCADE
    );

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: porch-db-config
  namespace: porch-system
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: porch
data:
  DB_DRIVER: "pgx"
  DB_HOST: "porch-postgresql"
  DB_PORT: "5432"
  DB_NAME: "porch"

---

apiVersion: v1
kind: Secret
metadata:
  name: porch-db-secret
  namespace: porch-system
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: porch
type: Opaque
data:
  DB_USER: "cG9yY2g="
  DB_PASSWORD: "cG9yY2g="

