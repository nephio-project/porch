// Code generated by mockery v2.53.3. DO NOT EDIT.

package repository

import (
	context "context"

	repository "github.com/nephio-project/porch/pkg/repository"
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	v1alpha1 "github.com/nephio-project/porch/api/porch/v1alpha1"
)

// MockPackageRevisionDraft is an autogenerated mock type for the PackageRevisionDraft type
type MockPackageRevisionDraft struct {
	mock.Mock
}

type MockPackageRevisionDraft_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPackageRevisionDraft) EXPECT() *MockPackageRevisionDraft_Expecter {
	return &MockPackageRevisionDraft_Expecter{mock: &_m.Mock}
}

// GetMeta provides a mock function with no fields
func (_m *MockPackageRevisionDraft) GetMeta() v1.ObjectMeta {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMeta")
	}

	var r0 v1.ObjectMeta
	if rf, ok := ret.Get(0).(func() v1.ObjectMeta); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(v1.ObjectMeta)
	}

	return r0
}

// MockPackageRevisionDraft_GetMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMeta'
type MockPackageRevisionDraft_GetMeta_Call struct {
	*mock.Call
}

// GetMeta is a helper method to define mock.On call
func (_e *MockPackageRevisionDraft_Expecter) GetMeta() *MockPackageRevisionDraft_GetMeta_Call {
	return &MockPackageRevisionDraft_GetMeta_Call{Call: _e.mock.On("GetMeta")}
}

func (_c *MockPackageRevisionDraft_GetMeta_Call) Run(run func()) *MockPackageRevisionDraft_GetMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPackageRevisionDraft_GetMeta_Call) Return(_a0 v1.ObjectMeta) *MockPackageRevisionDraft_GetMeta_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPackageRevisionDraft_GetMeta_Call) RunAndReturn(run func() v1.ObjectMeta) *MockPackageRevisionDraft_GetMeta_Call {
	_c.Call.Return(run)
	return _c
}

// Key provides a mock function with no fields
func (_m *MockPackageRevisionDraft) Key() repository.PackageRevisionKey {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 repository.PackageRevisionKey
	if rf, ok := ret.Get(0).(func() repository.PackageRevisionKey); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(repository.PackageRevisionKey)
	}

	return r0
}

// MockPackageRevisionDraft_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type MockPackageRevisionDraft_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *MockPackageRevisionDraft_Expecter) Key() *MockPackageRevisionDraft_Key_Call {
	return &MockPackageRevisionDraft_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *MockPackageRevisionDraft_Key_Call) Run(run func()) *MockPackageRevisionDraft_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPackageRevisionDraft_Key_Call) Return(_a0 repository.PackageRevisionKey) *MockPackageRevisionDraft_Key_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPackageRevisionDraft_Key_Call) RunAndReturn(run func() repository.PackageRevisionKey) *MockPackageRevisionDraft_Key_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLifecycle provides a mock function with given fields: _a0, _a1
func (_m *MockPackageRevisionDraft) UpdateLifecycle(_a0 context.Context, _a1 v1alpha1.PackageRevisionLifecycle) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLifecycle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v1alpha1.PackageRevisionLifecycle) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPackageRevisionDraft_UpdateLifecycle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLifecycle'
type MockPackageRevisionDraft_UpdateLifecycle_Call struct {
	*mock.Call
}

// UpdateLifecycle is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 v1alpha1.PackageRevisionLifecycle
func (_e *MockPackageRevisionDraft_Expecter) UpdateLifecycle(_a0 interface{}, _a1 interface{}) *MockPackageRevisionDraft_UpdateLifecycle_Call {
	return &MockPackageRevisionDraft_UpdateLifecycle_Call{Call: _e.mock.On("UpdateLifecycle", _a0, _a1)}
}

func (_c *MockPackageRevisionDraft_UpdateLifecycle_Call) Run(run func(_a0 context.Context, _a1 v1alpha1.PackageRevisionLifecycle)) *MockPackageRevisionDraft_UpdateLifecycle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1alpha1.PackageRevisionLifecycle))
	})
	return _c
}

func (_c *MockPackageRevisionDraft_UpdateLifecycle_Call) Return(_a0 error) *MockPackageRevisionDraft_UpdateLifecycle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPackageRevisionDraft_UpdateLifecycle_Call) RunAndReturn(run func(context.Context, v1alpha1.PackageRevisionLifecycle) error) *MockPackageRevisionDraft_UpdateLifecycle_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateResources provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockPackageRevisionDraft) UpdateResources(_a0 context.Context, _a1 *v1alpha1.PackageRevisionResources, _a2 *v1alpha1.Task) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.PackageRevisionResources, *v1alpha1.Task) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockPackageRevisionDraft_UpdateResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateResources'
type MockPackageRevisionDraft_UpdateResources_Call struct {
	*mock.Call
}

// UpdateResources is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1alpha1.PackageRevisionResources
//   - _a2 *v1alpha1.Task
func (_e *MockPackageRevisionDraft_Expecter) UpdateResources(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockPackageRevisionDraft_UpdateResources_Call {
	return &MockPackageRevisionDraft_UpdateResources_Call{Call: _e.mock.On("UpdateResources", _a0, _a1, _a2)}
}

func (_c *MockPackageRevisionDraft_UpdateResources_Call) Run(run func(_a0 context.Context, _a1 *v1alpha1.PackageRevisionResources, _a2 *v1alpha1.Task)) *MockPackageRevisionDraft_UpdateResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha1.PackageRevisionResources), args[2].(*v1alpha1.Task))
	})
	return _c
}

func (_c *MockPackageRevisionDraft_UpdateResources_Call) Return(_a0 error) *MockPackageRevisionDraft_UpdateResources_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPackageRevisionDraft_UpdateResources_Call) RunAndReturn(run func(context.Context, *v1alpha1.PackageRevisionResources, *v1alpha1.Task) error) *MockPackageRevisionDraft_UpdateResources_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPackageRevisionDraft creates a new instance of MockPackageRevisionDraft. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPackageRevisionDraft(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPackageRevisionDraft {
	mock := &MockPackageRevisionDraft{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
