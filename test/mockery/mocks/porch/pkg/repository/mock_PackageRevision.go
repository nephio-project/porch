// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"context"

	"github.com/nephio-project/porch/api/porch/v1alpha1"
	"github.com/nephio-project/porch/pkg/kpt/api/kptfile/v1"
	"github.com/nephio-project/porch/pkg/repository"
	mock "github.com/stretchr/testify/mock"
	v10 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
)

// NewMockPackageRevision creates a new instance of MockPackageRevision. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPackageRevision(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPackageRevision {
	mock := &MockPackageRevision{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPackageRevision is an autogenerated mock type for the PackageRevision type
type MockPackageRevision struct {
	mock.Mock
}

type MockPackageRevision_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPackageRevision) EXPECT() *MockPackageRevision_Expecter {
	return &MockPackageRevision_Expecter{mock: &_m.Mock}
}

// GetKptfile provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) GetKptfile(ctx context.Context) (v1.KptFile, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetKptfile")
	}

	var r0 v1.KptFile
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (v1.KptFile, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) v1.KptFile); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(v1.KptFile)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPackageRevision_GetKptfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKptfile'
type MockPackageRevision_GetKptfile_Call struct {
	*mock.Call
}

// GetKptfile is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPackageRevision_Expecter) GetKptfile(ctx interface{}) *MockPackageRevision_GetKptfile_Call {
	return &MockPackageRevision_GetKptfile_Call{Call: _e.mock.On("GetKptfile", ctx)}
}

func (_c *MockPackageRevision_GetKptfile_Call) Run(run func(ctx context.Context)) *MockPackageRevision_GetKptfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPackageRevision_GetKptfile_Call) Return(kptFile v1.KptFile, err error) *MockPackageRevision_GetKptfile_Call {
	_c.Call.Return(kptFile, err)
	return _c
}

func (_c *MockPackageRevision_GetKptfile_Call) RunAndReturn(run func(ctx context.Context) (v1.KptFile, error)) *MockPackageRevision_GetKptfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetLock provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) GetLock() (v1.Upstream, v1.UpstreamLock, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLock")
	}

	var r0 v1.Upstream
	var r1 v1.UpstreamLock
	var r2 error
	if returnFunc, ok := ret.Get(0).(func() (v1.Upstream, v1.UpstreamLock, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() v1.Upstream); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(v1.Upstream)
	}
	if returnFunc, ok := ret.Get(1).(func() v1.UpstreamLock); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Get(1).(v1.UpstreamLock)
	}
	if returnFunc, ok := ret.Get(2).(func() error); ok {
		r2 = returnFunc()
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPackageRevision_GetLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLock'
type MockPackageRevision_GetLock_Call struct {
	*mock.Call
}

// GetLock is a helper method to define mock.On call
func (_e *MockPackageRevision_Expecter) GetLock() *MockPackageRevision_GetLock_Call {
	return &MockPackageRevision_GetLock_Call{Call: _e.mock.On("GetLock")}
}

func (_c *MockPackageRevision_GetLock_Call) Run(run func()) *MockPackageRevision_GetLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPackageRevision_GetLock_Call) Return(upstream v1.Upstream, upstreamLock v1.UpstreamLock, err error) *MockPackageRevision_GetLock_Call {
	_c.Call.Return(upstream, upstreamLock, err)
	return _c
}

func (_c *MockPackageRevision_GetLock_Call) RunAndReturn(run func() (v1.Upstream, v1.UpstreamLock, error)) *MockPackageRevision_GetLock_Call {
	_c.Call.Return(run)
	return _c
}

// GetMeta provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) GetMeta() v10.ObjectMeta {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMeta")
	}

	var r0 v10.ObjectMeta
	if returnFunc, ok := ret.Get(0).(func() v10.ObjectMeta); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(v10.ObjectMeta)
	}
	return r0
}

// MockPackageRevision_GetMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMeta'
type MockPackageRevision_GetMeta_Call struct {
	*mock.Call
}

// GetMeta is a helper method to define mock.On call
func (_e *MockPackageRevision_Expecter) GetMeta() *MockPackageRevision_GetMeta_Call {
	return &MockPackageRevision_GetMeta_Call{Call: _e.mock.On("GetMeta")}
}

func (_c *MockPackageRevision_GetMeta_Call) Run(run func()) *MockPackageRevision_GetMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPackageRevision_GetMeta_Call) Return(objectMeta v10.ObjectMeta) *MockPackageRevision_GetMeta_Call {
	_c.Call.Return(objectMeta)
	return _c
}

func (_c *MockPackageRevision_GetMeta_Call) RunAndReturn(run func() v10.ObjectMeta) *MockPackageRevision_GetMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetPackageRevision provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) GetPackageRevision(ctx context.Context) (*v1alpha1.PackageRevision, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPackageRevision")
	}

	var r0 *v1alpha1.PackageRevision
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*v1alpha1.PackageRevision, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *v1alpha1.PackageRevision); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PackageRevision)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPackageRevision_GetPackageRevision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPackageRevision'
type MockPackageRevision_GetPackageRevision_Call struct {
	*mock.Call
}

// GetPackageRevision is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPackageRevision_Expecter) GetPackageRevision(ctx interface{}) *MockPackageRevision_GetPackageRevision_Call {
	return &MockPackageRevision_GetPackageRevision_Call{Call: _e.mock.On("GetPackageRevision", ctx)}
}

func (_c *MockPackageRevision_GetPackageRevision_Call) Run(run func(ctx context.Context)) *MockPackageRevision_GetPackageRevision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPackageRevision_GetPackageRevision_Call) Return(packageRevision *v1alpha1.PackageRevision, err error) *MockPackageRevision_GetPackageRevision_Call {
	_c.Call.Return(packageRevision, err)
	return _c
}

func (_c *MockPackageRevision_GetPackageRevision_Call) RunAndReturn(run func(ctx context.Context) (*v1alpha1.PackageRevision, error)) *MockPackageRevision_GetPackageRevision_Call {
	_c.Call.Return(run)
	return _c
}

// GetResources provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) GetResources(ctx context.Context) (*v1alpha1.PackageRevisionResources, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetResources")
	}

	var r0 *v1alpha1.PackageRevisionResources
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*v1alpha1.PackageRevisionResources, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *v1alpha1.PackageRevisionResources); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PackageRevisionResources)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPackageRevision_GetResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResources'
type MockPackageRevision_GetResources_Call struct {
	*mock.Call
}

// GetResources is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPackageRevision_Expecter) GetResources(ctx interface{}) *MockPackageRevision_GetResources_Call {
	return &MockPackageRevision_GetResources_Call{Call: _e.mock.On("GetResources", ctx)}
}

func (_c *MockPackageRevision_GetResources_Call) Run(run func(ctx context.Context)) *MockPackageRevision_GetResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPackageRevision_GetResources_Call) Return(packageRevisionResources *v1alpha1.PackageRevisionResources, err error) *MockPackageRevision_GetResources_Call {
	_c.Call.Return(packageRevisionResources, err)
	return _c
}

func (_c *MockPackageRevision_GetResources_Call) RunAndReturn(run func(ctx context.Context) (*v1alpha1.PackageRevisionResources, error)) *MockPackageRevision_GetResources_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpstreamLock provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) GetUpstreamLock(ctx context.Context) (v1.Upstream, v1.UpstreamLock, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetUpstreamLock")
	}

	var r0 v1.Upstream
	var r1 v1.UpstreamLock
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (v1.Upstream, v1.UpstreamLock, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) v1.Upstream); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(v1.Upstream)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) v1.UpstreamLock); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Get(1).(v1.UpstreamLock)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = returnFunc(ctx)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPackageRevision_GetUpstreamLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpstreamLock'
type MockPackageRevision_GetUpstreamLock_Call struct {
	*mock.Call
}

// GetUpstreamLock is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPackageRevision_Expecter) GetUpstreamLock(ctx interface{}) *MockPackageRevision_GetUpstreamLock_Call {
	return &MockPackageRevision_GetUpstreamLock_Call{Call: _e.mock.On("GetUpstreamLock", ctx)}
}

func (_c *MockPackageRevision_GetUpstreamLock_Call) Run(run func(ctx context.Context)) *MockPackageRevision_GetUpstreamLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPackageRevision_GetUpstreamLock_Call) Return(upstream v1.Upstream, upstreamLock v1.UpstreamLock, err error) *MockPackageRevision_GetUpstreamLock_Call {
	_c.Call.Return(upstream, upstreamLock, err)
	return _c
}

func (_c *MockPackageRevision_GetUpstreamLock_Call) RunAndReturn(run func(ctx context.Context) (v1.Upstream, v1.UpstreamLock, error)) *MockPackageRevision_GetUpstreamLock_Call {
	_c.Call.Return(run)
	return _c
}

// Key provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) Key() repository.PackageRevisionKey {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Key")
	}

	var r0 repository.PackageRevisionKey
	if returnFunc, ok := ret.Get(0).(func() repository.PackageRevisionKey); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(repository.PackageRevisionKey)
	}
	return r0
}

// MockPackageRevision_Key_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Key'
type MockPackageRevision_Key_Call struct {
	*mock.Call
}

// Key is a helper method to define mock.On call
func (_e *MockPackageRevision_Expecter) Key() *MockPackageRevision_Key_Call {
	return &MockPackageRevision_Key_Call{Call: _e.mock.On("Key")}
}

func (_c *MockPackageRevision_Key_Call) Run(run func()) *MockPackageRevision_Key_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPackageRevision_Key_Call) Return(packageRevisionKey repository.PackageRevisionKey) *MockPackageRevision_Key_Call {
	_c.Call.Return(packageRevisionKey)
	return _c
}

func (_c *MockPackageRevision_Key_Call) RunAndReturn(run func() repository.PackageRevisionKey) *MockPackageRevision_Key_Call {
	_c.Call.Return(run)
	return _c
}

// KubeObjectName provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) KubeObjectName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for KubeObjectName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPackageRevision_KubeObjectName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KubeObjectName'
type MockPackageRevision_KubeObjectName_Call struct {
	*mock.Call
}

// KubeObjectName is a helper method to define mock.On call
func (_e *MockPackageRevision_Expecter) KubeObjectName() *MockPackageRevision_KubeObjectName_Call {
	return &MockPackageRevision_KubeObjectName_Call{Call: _e.mock.On("KubeObjectName")}
}

func (_c *MockPackageRevision_KubeObjectName_Call) Run(run func()) *MockPackageRevision_KubeObjectName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPackageRevision_KubeObjectName_Call) Return(s string) *MockPackageRevision_KubeObjectName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPackageRevision_KubeObjectName_Call) RunAndReturn(run func() string) *MockPackageRevision_KubeObjectName_Call {
	_c.Call.Return(run)
	return _c
}

// KubeObjectNamespace provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) KubeObjectNamespace() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for KubeObjectNamespace")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPackageRevision_KubeObjectNamespace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KubeObjectNamespace'
type MockPackageRevision_KubeObjectNamespace_Call struct {
	*mock.Call
}

// KubeObjectNamespace is a helper method to define mock.On call
func (_e *MockPackageRevision_Expecter) KubeObjectNamespace() *MockPackageRevision_KubeObjectNamespace_Call {
	return &MockPackageRevision_KubeObjectNamespace_Call{Call: _e.mock.On("KubeObjectNamespace")}
}

func (_c *MockPackageRevision_KubeObjectNamespace_Call) Run(run func()) *MockPackageRevision_KubeObjectNamespace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPackageRevision_KubeObjectNamespace_Call) Return(s string) *MockPackageRevision_KubeObjectNamespace_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPackageRevision_KubeObjectNamespace_Call) RunAndReturn(run func() string) *MockPackageRevision_KubeObjectNamespace_Call {
	_c.Call.Return(run)
	return _c
}

// Lifecycle provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) Lifecycle(ctx context.Context) v1alpha1.PackageRevisionLifecycle {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Lifecycle")
	}

	var r0 v1alpha1.PackageRevisionLifecycle
	if returnFunc, ok := ret.Get(0).(func(context.Context) v1alpha1.PackageRevisionLifecycle); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(v1alpha1.PackageRevisionLifecycle)
	}
	return r0
}

// MockPackageRevision_Lifecycle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Lifecycle'
type MockPackageRevision_Lifecycle_Call struct {
	*mock.Call
}

// Lifecycle is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPackageRevision_Expecter) Lifecycle(ctx interface{}) *MockPackageRevision_Lifecycle_Call {
	return &MockPackageRevision_Lifecycle_Call{Call: _e.mock.On("Lifecycle", ctx)}
}

func (_c *MockPackageRevision_Lifecycle_Call) Run(run func(ctx context.Context)) *MockPackageRevision_Lifecycle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPackageRevision_Lifecycle_Call) Return(packageRevisionLifecycle v1alpha1.PackageRevisionLifecycle) *MockPackageRevision_Lifecycle_Call {
	_c.Call.Return(packageRevisionLifecycle)
	return _c
}

func (_c *MockPackageRevision_Lifecycle_Call) RunAndReturn(run func(ctx context.Context) v1alpha1.PackageRevisionLifecycle) *MockPackageRevision_Lifecycle_Call {
	_c.Call.Return(run)
	return _c
}

// ResourceVersion provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) ResourceVersion() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ResourceVersion")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockPackageRevision_ResourceVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourceVersion'
type MockPackageRevision_ResourceVersion_Call struct {
	*mock.Call
}

// ResourceVersion is a helper method to define mock.On call
func (_e *MockPackageRevision_Expecter) ResourceVersion() *MockPackageRevision_ResourceVersion_Call {
	return &MockPackageRevision_ResourceVersion_Call{Call: _e.mock.On("ResourceVersion")}
}

func (_c *MockPackageRevision_ResourceVersion_Call) Run(run func()) *MockPackageRevision_ResourceVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPackageRevision_ResourceVersion_Call) Return(s string) *MockPackageRevision_ResourceVersion_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockPackageRevision_ResourceVersion_Call) RunAndReturn(run func() string) *MockPackageRevision_ResourceVersion_Call {
	_c.Call.Return(run)
	return _c
}

// SetMeta provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) SetMeta(ctx context.Context, meta v10.ObjectMeta) error {
	ret := _mock.Called(ctx, meta)

	if len(ret) == 0 {
		panic("no return value specified for SetMeta")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v10.ObjectMeta) error); ok {
		r0 = returnFunc(ctx, meta)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPackageRevision_SetMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetMeta'
type MockPackageRevision_SetMeta_Call struct {
	*mock.Call
}

// SetMeta is a helper method to define mock.On call
//   - ctx context.Context
//   - meta v10.ObjectMeta
func (_e *MockPackageRevision_Expecter) SetMeta(ctx interface{}, meta interface{}) *MockPackageRevision_SetMeta_Call {
	return &MockPackageRevision_SetMeta_Call{Call: _e.mock.On("SetMeta", ctx, meta)}
}

func (_c *MockPackageRevision_SetMeta_Call) Run(run func(ctx context.Context, meta v10.ObjectMeta)) *MockPackageRevision_SetMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v10.ObjectMeta
		if args[1] != nil {
			arg1 = args[1].(v10.ObjectMeta)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPackageRevision_SetMeta_Call) Return(err error) *MockPackageRevision_SetMeta_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPackageRevision_SetMeta_Call) RunAndReturn(run func(ctx context.Context, meta v10.ObjectMeta) error) *MockPackageRevision_SetMeta_Call {
	_c.Call.Return(run)
	return _c
}

// ToMainPackageRevision provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) ToMainPackageRevision(ctx context.Context) repository.PackageRevision {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ToMainPackageRevision")
	}

	var r0 repository.PackageRevision
	if returnFunc, ok := ret.Get(0).(func(context.Context) repository.PackageRevision); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.PackageRevision)
		}
	}
	return r0
}

// MockPackageRevision_ToMainPackageRevision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToMainPackageRevision'
type MockPackageRevision_ToMainPackageRevision_Call struct {
	*mock.Call
}

// ToMainPackageRevision is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPackageRevision_Expecter) ToMainPackageRevision(ctx interface{}) *MockPackageRevision_ToMainPackageRevision_Call {
	return &MockPackageRevision_ToMainPackageRevision_Call{Call: _e.mock.On("ToMainPackageRevision", ctx)}
}

func (_c *MockPackageRevision_ToMainPackageRevision_Call) Run(run func(ctx context.Context)) *MockPackageRevision_ToMainPackageRevision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPackageRevision_ToMainPackageRevision_Call) Return(packageRevision repository.PackageRevision) *MockPackageRevision_ToMainPackageRevision_Call {
	_c.Call.Return(packageRevision)
	return _c
}

func (_c *MockPackageRevision_ToMainPackageRevision_Call) RunAndReturn(run func(ctx context.Context) repository.PackageRevision) *MockPackageRevision_ToMainPackageRevision_Call {
	_c.Call.Return(run)
	return _c
}

// UID provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) UID() types.UID {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for UID")
	}

	var r0 types.UID
	if returnFunc, ok := ret.Get(0).(func() types.UID); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(types.UID)
	}
	return r0
}

// MockPackageRevision_UID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UID'
type MockPackageRevision_UID_Call struct {
	*mock.Call
}

// UID is a helper method to define mock.On call
func (_e *MockPackageRevision_Expecter) UID() *MockPackageRevision_UID_Call {
	return &MockPackageRevision_UID_Call{Call: _e.mock.On("UID")}
}

func (_c *MockPackageRevision_UID_Call) Run(run func()) *MockPackageRevision_UID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPackageRevision_UID_Call) Return(uID types.UID) *MockPackageRevision_UID_Call {
	_c.Call.Return(uID)
	return _c
}

func (_c *MockPackageRevision_UID_Call) RunAndReturn(run func() types.UID) *MockPackageRevision_UID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLifecycle provides a mock function for the type MockPackageRevision
func (_mock *MockPackageRevision) UpdateLifecycle(ctx context.Context, lifecycle v1alpha1.PackageRevisionLifecycle) error {
	ret := _mock.Called(ctx, lifecycle)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLifecycle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1alpha1.PackageRevisionLifecycle) error); ok {
		r0 = returnFunc(ctx, lifecycle)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockPackageRevision_UpdateLifecycle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLifecycle'
type MockPackageRevision_UpdateLifecycle_Call struct {
	*mock.Call
}

// UpdateLifecycle is a helper method to define mock.On call
//   - ctx context.Context
//   - lifecycle v1alpha1.PackageRevisionLifecycle
func (_e *MockPackageRevision_Expecter) UpdateLifecycle(ctx interface{}, lifecycle interface{}) *MockPackageRevision_UpdateLifecycle_Call {
	return &MockPackageRevision_UpdateLifecycle_Call{Call: _e.mock.On("UpdateLifecycle", ctx, lifecycle)}
}

func (_c *MockPackageRevision_UpdateLifecycle_Call) Run(run func(ctx context.Context, lifecycle v1alpha1.PackageRevisionLifecycle)) *MockPackageRevision_UpdateLifecycle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1alpha1.PackageRevisionLifecycle
		if args[1] != nil {
			arg1 = args[1].(v1alpha1.PackageRevisionLifecycle)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPackageRevision_UpdateLifecycle_Call) Return(err error) *MockPackageRevision_UpdateLifecycle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockPackageRevision_UpdateLifecycle_Call) RunAndReturn(run func(ctx context.Context, lifecycle v1alpha1.PackageRevisionLifecycle) error) *MockPackageRevision_UpdateLifecycle_Call {
	_c.Call.Return(run)
	return _c
}
