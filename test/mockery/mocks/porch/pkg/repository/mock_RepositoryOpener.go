// Code generated by mockery v2.53.3. DO NOT EDIT.

package repository

import (
	context "context"

	repository "github.com/nephio-project/porch/pkg/repository"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/nephio-project/porch/api/porchconfig/v1alpha1"
)

// MockRepositoryOpener is an autogenerated mock type for the RepositoryOpener type
type MockRepositoryOpener struct {
	mock.Mock
}

type MockRepositoryOpener_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryOpener) EXPECT() *MockRepositoryOpener_Expecter {
	return &MockRepositoryOpener_Expecter{mock: &_m.Mock}
}

// OpenRepository provides a mock function with given fields: ctx, repositorySpec
func (_m *MockRepositoryOpener) OpenRepository(ctx context.Context, repositorySpec *v1alpha1.Repository) (repository.Repository, error) {
	ret := _m.Called(ctx, repositorySpec)

	if len(ret) == 0 {
		panic("no return value specified for OpenRepository")
	}

	var r0 repository.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Repository) (repository.Repository, error)); ok {
		return rf(ctx, repositorySpec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Repository) repository.Repository); ok {
		r0 = rf(ctx, repositorySpec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.Repository) error); ok {
		r1 = rf(ctx, repositorySpec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepositoryOpener_OpenRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenRepository'
type MockRepositoryOpener_OpenRepository_Call struct {
	*mock.Call
}

// OpenRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - repositorySpec *v1alpha1.Repository
func (_e *MockRepositoryOpener_Expecter) OpenRepository(ctx interface{}, repositorySpec interface{}) *MockRepositoryOpener_OpenRepository_Call {
	return &MockRepositoryOpener_OpenRepository_Call{Call: _e.mock.On("OpenRepository", ctx, repositorySpec)}
}

func (_c *MockRepositoryOpener_OpenRepository_Call) Run(run func(ctx context.Context, repositorySpec *v1alpha1.Repository)) *MockRepositoryOpener_OpenRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha1.Repository))
	})
	return _c
}

func (_c *MockRepositoryOpener_OpenRepository_Call) Return(_a0 repository.Repository, _a1 error) *MockRepositoryOpener_OpenRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepositoryOpener_OpenRepository_Call) RunAndReturn(run func(context.Context, *v1alpha1.Repository) (repository.Repository, error)) *MockRepositoryOpener_OpenRepository_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositoryOpener creates a new instance of MockRepositoryOpener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryOpener(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryOpener {
	mock := &MockRepositoryOpener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
