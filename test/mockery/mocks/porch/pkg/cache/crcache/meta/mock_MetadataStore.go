// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package meta

import (
	"context"

	"github.com/nephio-project/porch/api/porchconfig/v1alpha1"
	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
)

// NewMockMetadataStore creates a new instance of MockMetadataStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetadataStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetadataStore {
	mock := &MockMetadataStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetadataStore is an autogenerated mock type for the MetadataStore type
type MockMetadataStore struct {
	mock.Mock
}

type MockMetadataStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetadataStore) EXPECT() *MockMetadataStore_Expecter {
	return &MockMetadataStore_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockMetadataStore
func (_mock *MockMetadataStore) Create(ctx context.Context, pkgRevMeta v1.ObjectMeta, repoName string, pkgRevUID types.UID) (v1.ObjectMeta, error) {
	ret := _mock.Called(ctx, pkgRevMeta, repoName, pkgRevUID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 v1.ObjectMeta
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ObjectMeta, string, types.UID) (v1.ObjectMeta, error)); ok {
		return returnFunc(ctx, pkgRevMeta, repoName, pkgRevUID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ObjectMeta, string, types.UID) v1.ObjectMeta); ok {
		r0 = returnFunc(ctx, pkgRevMeta, repoName, pkgRevUID)
	} else {
		r0 = ret.Get(0).(v1.ObjectMeta)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1.ObjectMeta, string, types.UID) error); ok {
		r1 = returnFunc(ctx, pkgRevMeta, repoName, pkgRevUID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetadataStore_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMetadataStore_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - pkgRevMeta v1.ObjectMeta
//   - repoName string
//   - pkgRevUID types.UID
func (_e *MockMetadataStore_Expecter) Create(ctx interface{}, pkgRevMeta interface{}, repoName interface{}, pkgRevUID interface{}) *MockMetadataStore_Create_Call {
	return &MockMetadataStore_Create_Call{Call: _e.mock.On("Create", ctx, pkgRevMeta, repoName, pkgRevUID)}
}

func (_c *MockMetadataStore_Create_Call) Run(run func(ctx context.Context, pkgRevMeta v1.ObjectMeta, repoName string, pkgRevUID types.UID)) *MockMetadataStore_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.ObjectMeta
		if args[1] != nil {
			arg1 = args[1].(v1.ObjectMeta)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 types.UID
		if args[3] != nil {
			arg3 = args[3].(types.UID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockMetadataStore_Create_Call) Return(objectMeta v1.ObjectMeta, err error) *MockMetadataStore_Create_Call {
	_c.Call.Return(objectMeta, err)
	return _c
}

func (_c *MockMetadataStore_Create_Call) RunAndReturn(run func(ctx context.Context, pkgRevMeta v1.ObjectMeta, repoName string, pkgRevUID types.UID) (v1.ObjectMeta, error)) *MockMetadataStore_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockMetadataStore
func (_mock *MockMetadataStore) Delete(ctx context.Context, namespacedName types.NamespacedName, clearFinalizer bool) (v1.ObjectMeta, error) {
	ret := _mock.Called(ctx, namespacedName, clearFinalizer)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 v1.ObjectMeta
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.NamespacedName, bool) (v1.ObjectMeta, error)); ok {
		return returnFunc(ctx, namespacedName, clearFinalizer)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.NamespacedName, bool) v1.ObjectMeta); ok {
		r0 = returnFunc(ctx, namespacedName, clearFinalizer)
	} else {
		r0 = ret.Get(0).(v1.ObjectMeta)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.NamespacedName, bool) error); ok {
		r1 = returnFunc(ctx, namespacedName, clearFinalizer)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetadataStore_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMetadataStore_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - namespacedName types.NamespacedName
//   - clearFinalizer bool
func (_e *MockMetadataStore_Expecter) Delete(ctx interface{}, namespacedName interface{}, clearFinalizer interface{}) *MockMetadataStore_Delete_Call {
	return &MockMetadataStore_Delete_Call{Call: _e.mock.On("Delete", ctx, namespacedName, clearFinalizer)}
}

func (_c *MockMetadataStore_Delete_Call) Run(run func(ctx context.Context, namespacedName types.NamespacedName, clearFinalizer bool)) *MockMetadataStore_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.NamespacedName
		if args[1] != nil {
			arg1 = args[1].(types.NamespacedName)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMetadataStore_Delete_Call) Return(objectMeta v1.ObjectMeta, err error) *MockMetadataStore_Delete_Call {
	_c.Call.Return(objectMeta, err)
	return _c
}

func (_c *MockMetadataStore_Delete_Call) RunAndReturn(run func(ctx context.Context, namespacedName types.NamespacedName, clearFinalizer bool) (v1.ObjectMeta, error)) *MockMetadataStore_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockMetadataStore
func (_mock *MockMetadataStore) Get(ctx context.Context, namespacedName types.NamespacedName) (v1.ObjectMeta, error) {
	ret := _mock.Called(ctx, namespacedName)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 v1.ObjectMeta
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.NamespacedName) (v1.ObjectMeta, error)); ok {
		return returnFunc(ctx, namespacedName)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, types.NamespacedName) v1.ObjectMeta); ok {
		r0 = returnFunc(ctx, namespacedName)
	} else {
		r0 = ret.Get(0).(v1.ObjectMeta)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, types.NamespacedName) error); ok {
		r1 = returnFunc(ctx, namespacedName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetadataStore_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockMetadataStore_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - namespacedName types.NamespacedName
func (_e *MockMetadataStore_Expecter) Get(ctx interface{}, namespacedName interface{}) *MockMetadataStore_Get_Call {
	return &MockMetadataStore_Get_Call{Call: _e.mock.On("Get", ctx, namespacedName)}
}

func (_c *MockMetadataStore_Get_Call) Run(run func(ctx context.Context, namespacedName types.NamespacedName)) *MockMetadataStore_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 types.NamespacedName
		if args[1] != nil {
			arg1 = args[1].(types.NamespacedName)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetadataStore_Get_Call) Return(objectMeta v1.ObjectMeta, err error) *MockMetadataStore_Get_Call {
	_c.Call.Return(objectMeta, err)
	return _c
}

func (_c *MockMetadataStore_Get_Call) RunAndReturn(run func(ctx context.Context, namespacedName types.NamespacedName) (v1.ObjectMeta, error)) *MockMetadataStore_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockMetadataStore
func (_mock *MockMetadataStore) List(ctx context.Context, repo *v1alpha1.Repository) ([]v1.ObjectMeta, error) {
	ret := _mock.Called(ctx, repo)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []v1.ObjectMeta
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1alpha1.Repository) ([]v1.ObjectMeta, error)); ok {
		return returnFunc(ctx, repo)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *v1alpha1.Repository) []v1.ObjectMeta); ok {
		r0 = returnFunc(ctx, repo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.ObjectMeta)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *v1alpha1.Repository) error); ok {
		r1 = returnFunc(ctx, repo)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetadataStore_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockMetadataStore_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - repo *v1alpha1.Repository
func (_e *MockMetadataStore_Expecter) List(ctx interface{}, repo interface{}) *MockMetadataStore_List_Call {
	return &MockMetadataStore_List_Call{Call: _e.mock.On("List", ctx, repo)}
}

func (_c *MockMetadataStore_List_Call) Run(run func(ctx context.Context, repo *v1alpha1.Repository)) *MockMetadataStore_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *v1alpha1.Repository
		if args[1] != nil {
			arg1 = args[1].(*v1alpha1.Repository)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetadataStore_List_Call) Return(objectMetas []v1.ObjectMeta, err error) *MockMetadataStore_List_Call {
	_c.Call.Return(objectMetas, err)
	return _c
}

func (_c *MockMetadataStore_List_Call) RunAndReturn(run func(ctx context.Context, repo *v1alpha1.Repository) ([]v1.ObjectMeta, error)) *MockMetadataStore_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockMetadataStore
func (_mock *MockMetadataStore) Update(ctx context.Context, pkgRevMeta v1.ObjectMeta) (v1.ObjectMeta, error) {
	ret := _mock.Called(ctx, pkgRevMeta)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 v1.ObjectMeta
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ObjectMeta) (v1.ObjectMeta, error)); ok {
		return returnFunc(ctx, pkgRevMeta)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, v1.ObjectMeta) v1.ObjectMeta); ok {
		r0 = returnFunc(ctx, pkgRevMeta)
	} else {
		r0 = ret.Get(0).(v1.ObjectMeta)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, v1.ObjectMeta) error); ok {
		r1 = returnFunc(ctx, pkgRevMeta)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetadataStore_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMetadataStore_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - pkgRevMeta v1.ObjectMeta
func (_e *MockMetadataStore_Expecter) Update(ctx interface{}, pkgRevMeta interface{}) *MockMetadataStore_Update_Call {
	return &MockMetadataStore_Update_Call{Call: _e.mock.On("Update", ctx, pkgRevMeta)}
}

func (_c *MockMetadataStore_Update_Call) Run(run func(ctx context.Context, pkgRevMeta v1.ObjectMeta)) *MockMetadataStore_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 v1.ObjectMeta
		if args[1] != nil {
			arg1 = args[1].(v1.ObjectMeta)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetadataStore_Update_Call) Return(objectMeta v1.ObjectMeta, err error) *MockMetadataStore_Update_Call {
	_c.Call.Return(objectMeta, err)
	return _c
}

func (_c *MockMetadataStore_Update_Call) RunAndReturn(run func(ctx context.Context, pkgRevMeta v1.ObjectMeta) (v1.ObjectMeta, error)) *MockMetadataStore_Update_Call {
	_c.Call.Return(run)
	return _c
}
