// Code generated by mockery v2.53.3. DO NOT EDIT.

package dbcache

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockRepositorySync is an autogenerated mock type for the RepositorySync type
type MockRepositorySync struct {
	mock.Mock
}

type MockRepositorySync_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositorySync) EXPECT() *MockRepositorySync_Expecter {
	return &MockRepositorySync_Expecter{mock: &_m.Mock}
}

// GetLastSyncError provides a mock function with no fields
func (_m *MockRepositorySync) GetLastSyncError() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastSyncError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepositorySync_GetLastSyncError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastSyncError'
type MockRepositorySync_GetLastSyncError_Call struct {
	*mock.Call
}

// GetLastSyncError is a helper method to define mock.On call
func (_e *MockRepositorySync_Expecter) GetLastSyncError() *MockRepositorySync_GetLastSyncError_Call {
	return &MockRepositorySync_GetLastSyncError_Call{Call: _e.mock.On("GetLastSyncError")}
}

func (_c *MockRepositorySync_GetLastSyncError_Call) Run(run func()) *MockRepositorySync_GetLastSyncError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepositorySync_GetLastSyncError_Call) Return(_a0 error) *MockRepositorySync_GetLastSyncError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepositorySync_GetLastSyncError_Call) RunAndReturn(run func() error) *MockRepositorySync_GetLastSyncError_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockRepositorySync) Stop() {
	_m.Called()
}

// MockRepositorySync_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockRepositorySync_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockRepositorySync_Expecter) Stop() *MockRepositorySync_Stop_Call {
	return &MockRepositorySync_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockRepositorySync_Stop_Call) Run(run func()) *MockRepositorySync_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepositorySync_Stop_Call) Return() *MockRepositorySync_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRepositorySync_Stop_Call) RunAndReturn(run func()) *MockRepositorySync_Stop_Call {
	_c.Run(run)
	return _c
}

// SyncAfter provides a mock function with given fields: delayBeforeSync
func (_m *MockRepositorySync) SyncAfter(delayBeforeSync time.Duration) {
	_m.Called(delayBeforeSync)
}

// MockRepositorySync_SyncAfter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncAfter'
type MockRepositorySync_SyncAfter_Call struct {
	*mock.Call
}

// SyncAfter is a helper method to define mock.On call
//   - delayBeforeSync time.Duration
func (_e *MockRepositorySync_Expecter) SyncAfter(delayBeforeSync interface{}) *MockRepositorySync_SyncAfter_Call {
	return &MockRepositorySync_SyncAfter_Call{Call: _e.mock.On("SyncAfter", delayBeforeSync)}
}

func (_c *MockRepositorySync_SyncAfter_Call) Run(run func(delayBeforeSync time.Duration)) *MockRepositorySync_SyncAfter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(time.Duration))
	})
	return _c
}

func (_c *MockRepositorySync_SyncAfter_Call) Return() *MockRepositorySync_SyncAfter_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRepositorySync_SyncAfter_Call) RunAndReturn(run func(time.Duration)) *MockRepositorySync_SyncAfter_Call {
	_c.Run(run)
	return _c
}

// NewMockRepositorySync creates a new instance of MockRepositorySync. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositorySync(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositorySync {
	mock := &MockRepositorySync{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
