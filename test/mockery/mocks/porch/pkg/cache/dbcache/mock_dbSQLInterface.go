// Code generated by mockery v2.53.3. DO NOT EDIT.

package dbcache

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// MockdbSQLInterface is an autogenerated mock type for the dbSQLInterface type
type MockdbSQLInterface struct {
	mock.Mock
}

type MockdbSQLInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockdbSQLInterface) EXPECT() *MockdbSQLInterface_Expecter {
	return &MockdbSQLInterface_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockdbSQLInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockdbSQLInterface_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockdbSQLInterface_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockdbSQLInterface_Expecter) Close() *MockdbSQLInterface_Close_Call {
	return &MockdbSQLInterface_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockdbSQLInterface_Close_Call) Run(run func()) *MockdbSQLInterface_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockdbSQLInterface_Close_Call) Return(_a0 error) *MockdbSQLInterface_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdbSQLInterface_Close_Call) RunAndReturn(run func() error) *MockdbSQLInterface_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Exec provides a mock function with given fields: query, args
func (_m *MockdbSQLInterface) Exec(query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (sql.Result, error)); ok {
		return rf(query, args...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) sql.Result); ok {
		r0 = rf(query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdbSQLInterface_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockdbSQLInterface_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - query string
//   - args ...interface{}
func (_e *MockdbSQLInterface_Expecter) Exec(query interface{}, args ...interface{}) *MockdbSQLInterface_Exec_Call {
	return &MockdbSQLInterface_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{query}, args...)...)}
}

func (_c *MockdbSQLInterface_Exec_Call) Run(run func(query string, args ...interface{})) *MockdbSQLInterface_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockdbSQLInterface_Exec_Call) Return(_a0 sql.Result, _a1 error) *MockdbSQLInterface_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdbSQLInterface_Exec_Call) RunAndReturn(run func(string, ...interface{}) (sql.Result, error)) *MockdbSQLInterface_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: _a0, _a1
func (_m *MockdbSQLInterface) Query(_a0 string, _a1 ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) (*sql.Rows, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Rows); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockdbSQLInterface_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockdbSQLInterface_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...interface{}
func (_e *MockdbSQLInterface_Expecter) Query(_a0 interface{}, _a1 ...interface{}) *MockdbSQLInterface_Query_Call {
	return &MockdbSQLInterface_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockdbSQLInterface_Query_Call) Run(run func(_a0 string, _a1 ...interface{})) *MockdbSQLInterface_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockdbSQLInterface_Query_Call) Return(_a0 *sql.Rows, _a1 error) *MockdbSQLInterface_Query_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockdbSQLInterface_Query_Call) RunAndReturn(run func(string, ...interface{}) (*sql.Rows, error)) *MockdbSQLInterface_Query_Call {
	_c.Call.Return(run)
	return _c
}

// QueryRow provides a mock function with given fields: _a0, _a1
func (_m *MockdbSQLInterface) QueryRow(_a0 string, _a1 ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryRow")
	}

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(string, ...interface{}) *sql.Row); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// MockdbSQLInterface_QueryRow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRow'
type MockdbSQLInterface_QueryRow_Call struct {
	*mock.Call
}

// QueryRow is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...interface{}
func (_e *MockdbSQLInterface_Expecter) QueryRow(_a0 interface{}, _a1 ...interface{}) *MockdbSQLInterface_QueryRow_Call {
	return &MockdbSQLInterface_QueryRow_Call{Call: _e.mock.On("QueryRow",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *MockdbSQLInterface_QueryRow_Call) Run(run func(_a0 string, _a1 ...interface{})) *MockdbSQLInterface_QueryRow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockdbSQLInterface_QueryRow_Call) Return(_a0 *sql.Row) *MockdbSQLInterface_QueryRow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockdbSQLInterface_QueryRow_Call) RunAndReturn(run func(string, ...interface{}) *sql.Row) *MockdbSQLInterface_QueryRow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockdbSQLInterface creates a new instance of MockdbSQLInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockdbSQLInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockdbSQLInterface {
	mock := &MockdbSQLInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
