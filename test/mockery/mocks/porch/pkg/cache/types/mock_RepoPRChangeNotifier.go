// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cachetypes

import (
	"github.com/nephio-project/porch/pkg/repository"
	mock "github.com/stretchr/testify/mock"
	"k8s.io/apimachinery/pkg/watch"
)

// NewMockRepoPRChangeNotifier creates a new instance of MockRepoPRChangeNotifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepoPRChangeNotifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepoPRChangeNotifier {
	mock := &MockRepoPRChangeNotifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepoPRChangeNotifier is an autogenerated mock type for the RepoPRChangeNotifier type
type MockRepoPRChangeNotifier struct {
	mock.Mock
}

type MockRepoPRChangeNotifier_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepoPRChangeNotifier) EXPECT() *MockRepoPRChangeNotifier_Expecter {
	return &MockRepoPRChangeNotifier_Expecter{mock: &_m.Mock}
}

// NotifyPackageRevisionChange provides a mock function for the type MockRepoPRChangeNotifier
func (_mock *MockRepoPRChangeNotifier) NotifyPackageRevisionChange(eventType watch.EventType, obj repository.PackageRevision) int {
	ret := _mock.Called(eventType, obj)

	if len(ret) == 0 {
		panic("no return value specified for NotifyPackageRevisionChange")
	}

	var r0 int
	if returnFunc, ok := ret.Get(0).(func(watch.EventType, repository.PackageRevision) int); ok {
		r0 = returnFunc(eventType, obj)
	} else {
		r0 = ret.Get(0).(int)
	}
	return r0
}

// MockRepoPRChangeNotifier_NotifyPackageRevisionChange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NotifyPackageRevisionChange'
type MockRepoPRChangeNotifier_NotifyPackageRevisionChange_Call struct {
	*mock.Call
}

// NotifyPackageRevisionChange is a helper method to define mock.On call
//   - eventType watch.EventType
//   - obj repository.PackageRevision
func (_e *MockRepoPRChangeNotifier_Expecter) NotifyPackageRevisionChange(eventType interface{}, obj interface{}) *MockRepoPRChangeNotifier_NotifyPackageRevisionChange_Call {
	return &MockRepoPRChangeNotifier_NotifyPackageRevisionChange_Call{Call: _e.mock.On("NotifyPackageRevisionChange", eventType, obj)}
}

func (_c *MockRepoPRChangeNotifier_NotifyPackageRevisionChange_Call) Run(run func(eventType watch.EventType, obj repository.PackageRevision)) *MockRepoPRChangeNotifier_NotifyPackageRevisionChange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 watch.EventType
		if args[0] != nil {
			arg0 = args[0].(watch.EventType)
		}
		var arg1 repository.PackageRevision
		if args[1] != nil {
			arg1 = args[1].(repository.PackageRevision)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepoPRChangeNotifier_NotifyPackageRevisionChange_Call) Return(n int) *MockRepoPRChangeNotifier_NotifyPackageRevisionChange_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *MockRepoPRChangeNotifier_NotifyPackageRevisionChange_Call) RunAndReturn(run func(eventType watch.EventType, obj repository.PackageRevision) int) *MockRepoPRChangeNotifier_NotifyPackageRevisionChange_Call {
	_c.Call.Return(run)
	return _c
}
