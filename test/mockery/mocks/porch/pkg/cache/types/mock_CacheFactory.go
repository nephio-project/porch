// Code generated by mockery v2.53.3. DO NOT EDIT.

package cachetypes

import (
	context "context"

	cachetypes "github.com/nephio-project/porch/pkg/cache/types"

	mock "github.com/stretchr/testify/mock"
)

// MockCacheFactory is an autogenerated mock type for the CacheFactory type
type MockCacheFactory struct {
	mock.Mock
}

type MockCacheFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheFactory) EXPECT() *MockCacheFactory_Expecter {
	return &MockCacheFactory_Expecter{mock: &_m.Mock}
}

// NewCache provides a mock function with given fields: ctx, options
func (_m *MockCacheFactory) NewCache(ctx context.Context, options cachetypes.CacheOptions) (cachetypes.Cache, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for NewCache")
	}

	var r0 cachetypes.Cache
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cachetypes.CacheOptions) (cachetypes.Cache, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cachetypes.CacheOptions) cachetypes.Cache); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cachetypes.Cache)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cachetypes.CacheOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCacheFactory_NewCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewCache'
type MockCacheFactory_NewCache_Call struct {
	*mock.Call
}

// NewCache is a helper method to define mock.On call
//   - ctx context.Context
//   - options cachetypes.CacheOptions
func (_e *MockCacheFactory_Expecter) NewCache(ctx interface{}, options interface{}) *MockCacheFactory_NewCache_Call {
	return &MockCacheFactory_NewCache_Call{Call: _e.mock.On("NewCache", ctx, options)}
}

func (_c *MockCacheFactory_NewCache_Call) Run(run func(ctx context.Context, options cachetypes.CacheOptions)) *MockCacheFactory_NewCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cachetypes.CacheOptions))
	})
	return _c
}

func (_c *MockCacheFactory_NewCache_Call) Return(_a0 cachetypes.Cache, _a1 error) *MockCacheFactory_NewCache_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCacheFactory_NewCache_Call) RunAndReturn(run func(context.Context, cachetypes.CacheOptions) (cachetypes.Cache, error)) *MockCacheFactory_NewCache_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCacheFactory creates a new instance of MockCacheFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheFactory {
	mock := &MockCacheFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
