// Code generated by mockery v2.53.3. DO NOT EDIT.

package cachetypes

import (
	context "context"

	repository "github.com/nephio-project/porch/pkg/repository"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/nephio-project/porch/api/porchconfig/v1alpha1"
)

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// CloseRepository provides a mock function with given fields: ctx, repositorySpec, allRepos
func (_m *MockCache) CloseRepository(ctx context.Context, repositorySpec *v1alpha1.Repository, allRepos []v1alpha1.Repository) error {
	ret := _m.Called(ctx, repositorySpec, allRepos)

	if len(ret) == 0 {
		panic("no return value specified for CloseRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Repository, []v1alpha1.Repository) error); ok {
		r0 = rf(ctx, repositorySpec, allRepos)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_CloseRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseRepository'
type MockCache_CloseRepository_Call struct {
	*mock.Call
}

// CloseRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - repositorySpec *v1alpha1.Repository
//   - allRepos []v1alpha1.Repository
func (_e *MockCache_Expecter) CloseRepository(ctx interface{}, repositorySpec interface{}, allRepos interface{}) *MockCache_CloseRepository_Call {
	return &MockCache_CloseRepository_Call{Call: _e.mock.On("CloseRepository", ctx, repositorySpec, allRepos)}
}

func (_c *MockCache_CloseRepository_Call) Run(run func(ctx context.Context, repositorySpec *v1alpha1.Repository, allRepos []v1alpha1.Repository)) *MockCache_CloseRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha1.Repository), args[2].([]v1alpha1.Repository))
	})
	return _c
}

func (_c *MockCache_CloseRepository_Call) Return(_a0 error) *MockCache_CloseRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_CloseRepository_Call) RunAndReturn(run func(context.Context, *v1alpha1.Repository, []v1alpha1.Repository) error) *MockCache_CloseRepository_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositories provides a mock function with no fields
func (_m *MockCache) GetRepositories() []*v1alpha1.Repository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRepositories")
	}

	var r0 []*v1alpha1.Repository
	if rf, ok := ret.Get(0).(func() []*v1alpha1.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1alpha1.Repository)
		}
	}

	return r0
}

// MockCache_GetRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositories'
type MockCache_GetRepositories_Call struct {
	*mock.Call
}

// GetRepositories is a helper method to define mock.On call
func (_e *MockCache_Expecter) GetRepositories() *MockCache_GetRepositories_Call {
	return &MockCache_GetRepositories_Call{Call: _e.mock.On("GetRepositories")}
}

func (_c *MockCache_GetRepositories_Call) Run(run func()) *MockCache_GetRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCache_GetRepositories_Call) Return(_a0 []*v1alpha1.Repository) *MockCache_GetRepositories_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_GetRepositories_Call) RunAndReturn(run func() []*v1alpha1.Repository) *MockCache_GetRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepository provides a mock function with given fields: _a0
func (_m *MockCache) GetRepository(_a0 repository.RepositoryKey) repository.Repository {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 repository.Repository
	if rf, ok := ret.Get(0).(func(repository.RepositoryKey) repository.Repository); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Repository)
		}
	}

	return r0
}

// MockCache_GetRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepository'
type MockCache_GetRepository_Call struct {
	*mock.Call
}

// GetRepository is a helper method to define mock.On call
//   - _a0 repository.RepositoryKey
func (_e *MockCache_Expecter) GetRepository(_a0 interface{}) *MockCache_GetRepository_Call {
	return &MockCache_GetRepository_Call{Call: _e.mock.On("GetRepository", _a0)}
}

func (_c *MockCache_GetRepository_Call) Run(run func(_a0 repository.RepositoryKey)) *MockCache_GetRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.RepositoryKey))
	})
	return _c
}

func (_c *MockCache_GetRepository_Call) Return(_a0 repository.Repository) *MockCache_GetRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_GetRepository_Call) RunAndReturn(run func(repository.RepositoryKey) repository.Repository) *MockCache_GetRepository_Call {
	_c.Call.Return(run)
	return _c
}

// OpenRepository provides a mock function with given fields: ctx, repositorySpec
func (_m *MockCache) OpenRepository(ctx context.Context, repositorySpec *v1alpha1.Repository) (repository.Repository, error) {
	ret := _m.Called(ctx, repositorySpec)

	if len(ret) == 0 {
		panic("no return value specified for OpenRepository")
	}

	var r0 repository.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Repository) (repository.Repository, error)); ok {
		return rf(ctx, repositorySpec)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Repository) repository.Repository); ok {
		r0 = rf(ctx, repositorySpec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1alpha1.Repository) error); ok {
		r1 = rf(ctx, repositorySpec)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCache_OpenRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenRepository'
type MockCache_OpenRepository_Call struct {
	*mock.Call
}

// OpenRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - repositorySpec *v1alpha1.Repository
func (_e *MockCache_Expecter) OpenRepository(ctx interface{}, repositorySpec interface{}) *MockCache_OpenRepository_Call {
	return &MockCache_OpenRepository_Call{Call: _e.mock.On("OpenRepository", ctx, repositorySpec)}
}

func (_c *MockCache_OpenRepository_Call) Run(run func(ctx context.Context, repositorySpec *v1alpha1.Repository)) *MockCache_OpenRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha1.Repository))
	})
	return _c
}

func (_c *MockCache_OpenRepository_Call) Return(_a0 repository.Repository, _a1 error) *MockCache_OpenRepository_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCache_OpenRepository_Call) RunAndReturn(run func(context.Context, *v1alpha1.Repository) (repository.Repository, error)) *MockCache_OpenRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRepository provides a mock function with given fields: ctx, repositorySpec
func (_m *MockCache) UpdateRepository(ctx context.Context, repositorySpec *v1alpha1.Repository) error {
	ret := _m.Called(ctx, repositorySpec)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1alpha1.Repository) error); ok {
		r0 = rf(ctx, repositorySpec)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCache_UpdateRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRepository'
type MockCache_UpdateRepository_Call struct {
	*mock.Call
}

// UpdateRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - repositorySpec *v1alpha1.Repository
func (_e *MockCache_Expecter) UpdateRepository(ctx interface{}, repositorySpec interface{}) *MockCache_UpdateRepository_Call {
	return &MockCache_UpdateRepository_Call{Call: _e.mock.On("UpdateRepository", ctx, repositorySpec)}
}

func (_c *MockCache_UpdateRepository_Call) Run(run func(ctx context.Context, repositorySpec *v1alpha1.Repository)) *MockCache_UpdateRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1alpha1.Repository))
	})
	return _c
}

func (_c *MockCache_UpdateRepository_Call) Return(_a0 error) *MockCache_UpdateRepository_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCache_UpdateRepository_Call) RunAndReturn(run func(context.Context, *v1alpha1.Repository) error) *MockCache_UpdateRepository_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
