// Code generated by mockery v2.53.3. DO NOT EDIT.

package engine

import (
	context "context"

	engine "github.com/nephio-project/porch/pkg/engine"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/nephio-project/porch/pkg/repository"
)

// MockWatcherManager is an autogenerated mock type for the WatcherManager type
type MockWatcherManager struct {
	mock.Mock
}

type MockWatcherManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWatcherManager) EXPECT() *MockWatcherManager_Expecter {
	return &MockWatcherManager_Expecter{mock: &_m.Mock}
}

// WatchPackageRevisions provides a mock function with given fields: ctx, filter, callback
func (_m *MockWatcherManager) WatchPackageRevisions(ctx context.Context, filter repository.ListPackageRevisionFilter, callback engine.ObjectWatcher) error {
	ret := _m.Called(ctx, filter, callback)

	if len(ret) == 0 {
		panic("no return value specified for WatchPackageRevisions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ListPackageRevisionFilter, engine.ObjectWatcher) error); ok {
		r0 = rf(ctx, filter, callback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockWatcherManager_WatchPackageRevisions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchPackageRevisions'
type MockWatcherManager_WatchPackageRevisions_Call struct {
	*mock.Call
}

// WatchPackageRevisions is a helper method to define mock.On call
//   - ctx context.Context
//   - filter repository.ListPackageRevisionFilter
//   - callback engine.ObjectWatcher
func (_e *MockWatcherManager_Expecter) WatchPackageRevisions(ctx interface{}, filter interface{}, callback interface{}) *MockWatcherManager_WatchPackageRevisions_Call {
	return &MockWatcherManager_WatchPackageRevisions_Call{Call: _e.mock.On("WatchPackageRevisions", ctx, filter, callback)}
}

func (_c *MockWatcherManager_WatchPackageRevisions_Call) Run(run func(ctx context.Context, filter repository.ListPackageRevisionFilter, callback engine.ObjectWatcher)) *MockWatcherManager_WatchPackageRevisions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.ListPackageRevisionFilter), args[2].(engine.ObjectWatcher))
	})
	return _c
}

func (_c *MockWatcherManager_WatchPackageRevisions_Call) Return(_a0 error) *MockWatcherManager_WatchPackageRevisions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWatcherManager_WatchPackageRevisions_Call) RunAndReturn(run func(context.Context, repository.ListPackageRevisionFilter, engine.ObjectWatcher) error) *MockWatcherManager_WatchPackageRevisions_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWatcherManager creates a new instance of MockWatcherManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWatcherManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWatcherManager {
	mock := &MockWatcherManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
